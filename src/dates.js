const m = {
  0: 29,
  1: 30,
  2: 31,
  3: 32,
  a: [2, 2, 3, 2, 2, 2, 1, 0, 1, 0, 1, 1],
  b: [2, 2, 3, 2, 3, 1, 1, 0, 1, 0, 1, 1],
  c: [2, 3, 2, 3, 2, 1, 1, 1, 0, 0, 1, 1],
  d: [1, 3, 2, 3, 2, 1, 1, 1, 0, 1, 0, 2],
  e: [2, 2, 3, 1, 2, 2, 1, 0, 1, 0, 1, 1],
  f: [2, 2, 3, 3, 1, 2, 1, 0, 1, 0, 1, 1],
  g: [2, 3, 2, 3, 2, 1, 1, 1, 0, 0, 1, 2],
  h: [1, 3, 2, 3, 2, 2, 0, 1, 0, 1, 0, 2],
  i: [2, 2, 3, 3, 2, 1, 1, 0, 1, 0, 1, 1],
  j: [1, 3, 2, 3, 2, 1, 1, 1, 0, 0, 1, 2],
  k: [2, 2, 2, 3, 2, 2, 0, 1, 1, 0, 1, 1],
  l: [2, 3, 2, 3, 2, 1, 1, 0, 1, 0, 1, 1],
  m: [2, 2, 2, 3, 2, 2, 1, 0, 1, 0, 1, 1],
  n: [1, 2, 3, 2, 2, 2, 1, 0, 1, 0, 1, 1],
  o: [2, 3, 2, 3, 2, 1, 1, 1, 0, 1, 0, 1],
  p: [2, 3, 2, 3, 2, 1, 1, 1, 0, 0, 0, 2],
  q: [2, 2, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2],
  r: [2, 3, 2, 3, 2, 1, 1, 1, 0, 1, 0, 2],
  s: [1, 3, 2, 3, 2, 2, 0, 1, 1, 0, 0, 2],
  t: [2, 2, 3, 3, 2, 1, 1, 1, 0, 1, 1, 1],
  u: [2, 3, 2, 3, 2, 1, 1, 1, 0, 1, 1, 1],
  v: [2, 2, 3, 2, 2, 1, 1, 1, 0, 1, 1, 1],
  w: [2, 3, 2, 3, 2, 2, 1, 1, 0, 1, 1, 1],
  x: [2, 2, 3, 2, 2, 2, 1, 1, 0, 1, 1, 1],
  y: [1, 2, 3, 3, 1, 2, 1, 1, 0, 1, 1, 1],
  z: [2, 2, 3, 2, 2, 2, 1, 0, 1, 1, 1, 1],
  aa: [1, 2, 3, 3, 2, 1, 1, 0, 1, 0, 1, 1],
  ab: [2, 2, 3, 2, 2, 2, 0, 1, 0, 1, 1, 2],
  ac: [2, 2, 3, 2, 2, 2, 1, 0, 0, 1, 1, 1],
  ad: [2, 3, 2, 3, 1, 2, 1, 0, 1, 0, 1, 1],
};

const d = {
  1970: [0, ...m.a],
  1971: [1, ...m.b],
  1972: [2, ...m.c],
  1973: [4, ...m.d],
  1974: [5, ...m.e],
  1975: [6, ...m.f],
  1976: [0, ...m.g],
  1977: [2, ...m.h],
  1978: [3, ...m.a],
  1979: [4, ...m.i],
  1980: [5, ...m.j],
  1981: [0, ...m.k],
  1982: [1, ...m.a],
  1983: [2, ...m.i],
  1984: [3, ...m.g],
  1985: [5, ...m.k],
  1986: [6, ...m.a],
  1987: [0, ...m.l],
  1988: [1, ...m.g],
  1989: [3, ...m.m],
  1990: [4, ...m.n],
  1991: [5, ...m.l],
  1992: [6, ...m.o],
  1993: [1, ...m.m],
  1994: [2, ...m.m],
  1995: [3, ...m.m],
  1996: [4, ...m.m],
  1997: [6, ...m.m],
  1998: [0, ...m.m],
  1999: [1, ...m.m],
  2000: [3, ...m.p],
  2001: [4, ...m.a],
  2002: [5, ...m.i],
  2003: [6, ...m.g],
  2004: [1, ...m.d],
  2005: [2, ...m.a],
  2006: [3, ...m.i],
  2007: [4, ...m.g],
  2008: [6, ...m.q],
  2009: [0, ...m.a],
  2010: [1, ...m.i],
  2011: [2, ...m.g],
  2012: [4, ...m.k],
  2013: [5, ...m.a],
  2014: [6, ...m.i],
  2015: [0, ...m.g],
  2016: [2, ...m.k],
  2017: [3, ...m.a],
  2018: [4, ...m.l],
  2019: [5, ...m.r],
  2020: [0, ...m.m],
  2021: [1, ...m.a],
  2022: [2, ...m.c],
  2023: [3, ...m.r],
  2024: [5, ...m.m],
  2025: [6, ...m.a],
  2026: [0, ...m.g],
  2027: [2, ...m.d],
  2028: [3, ...m.a],
  2029: [4, ...m.b],
  2030: [5, ...m.g],
  2031: [0, ...m.d],
  2032: [1, ...m.a],
  2033: [2, ...m.i],
  2034: [3, ...m.g],
  2035: [5, ...m.s],
  2036: [6, ...m.a],
  2037: [0, ...m.i],
  2038: [1, ...m.g],
  2039: [3, ...m.k],
  2040: [4, ...m.a],
  2041: [5, ...m.i],
  2042: [6, ...m.g],
  2043: [1, ...m.k],
  2044: [2, ...m.a],
  2045: [3, ...m.l],
  2046: [4, ...m.g],
  2047: [6, ...m.m],
  2048: [0, ...m.a],
  2049: [1, ...m.c],
  2050: [2, ...m.r],
  2051: [4, ...m.m],
  2052: [5, ...m.a],
  2053: [6, ...m.c],
  2054: [0, ...m.r],
  2055: [2, ...m.a],
  2056: [3, ...m.b],
  2057: [4, ...m.g],
  2058: [6, ...m.d],
  2059: [0, ...m.a],
  2060: [1, ...m.i],
  2061: [2, ...m.g],
  2062: [4, ...m.h],
  2063: [5, ...m.a],
  2064: [6, ...m.i],
  2065: [0, ...m.g],
  2066: [2, ...m.q],
  2067: [3, ...m.a],
  2068: [4, ...m.i],
  2069: [5, ...m.g],
  2070: [0, ...m.k],
  2071: [1, ...m.a],
  2072: [2, ...m.l],
  2073: [3, ...m.g],
  2074: [5, ...m.m],
  2075: [6, ...m.a],
  2076: [0, ...m.c],
  2077: [1, ...m.r],
  2078: [3, ...m.m],
  2079: [4, ...m.a],
  2080: [5, ...m.c],
  2081: [6, ...m.t],
  2082: [1, ...m.u],
  2083: [2, ...m.v],
  2084: [3, ...m.v],
  2085: [4, ...m.w],
  2086: [6, ...m.u],
  2087: [0, ...m.x],
  2088: [2, ...m.y],
  2089: [3, ...m.u],
  2090: [4, ...m.u],
  2091: [5, ...m.x],
  2092: [0, ...m.t],
  2093: [1, ...m.u],
  2094: [2, ...m.v],
  2095: [3, ...m.z],
  2096: [5, ...m.aa],
  2097: [5, ...m.u],
  2098: [0, ...m.ab],
  2099: [1, ...m.ac],
  2100: [2, ...m.ad],
};

export const currentYear = (year) => {
  let isFirst = 1;
  const yearData = [];
  let total = 1;
  d[year].reduce((a, v) => {
    if (isFirst) {
      yearData.push({ weekStart: a, endDate: m[v] });
      total = a + m[v];
      isFirst = 0;
    } else {
      yearData.push({
        weekStart: total % 7 === 0 ? 6 : (total % 7) - 1,
        endDate: m[v],
      });
      total += m[v];
    }
  });
  return yearData;
};

export const getYears = (year) => {
  return Object.keys(d);
};

export const getDates = () => {
  const conversionData = {};
  Object.keys(d)
    .filter((year) => parseInt(year) >= 2000 && parseInt(year) <= 2090)
    .map((year, i) => {
      conversionData[i] = d[year].map((date, i) =>
        i === 0 ? parseInt(year) : m[date]
      );
    });
  return conversionData;
};
